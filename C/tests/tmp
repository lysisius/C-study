==> 2d_arry_test.c <==
/* how to create and clean-up the 2d array '\0' */
/*  */
/* the difference between strcpy and stpcpy. i like stpcpy better because the
 * return is more useful (the last char) */
/* strlen doesn't consider the '\0' */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define OK 0

==> atoi_test.c <==
#include <stdio.h>
#include <stdlib.h>
#include "test_defs.h"

int main(int argc, char* argv[])
{
    basic_errs_e retstats = NO_ERR;

    if (argc != 2) {
        retstats = INVALID_ARG_ERR;

==> bitfields_test.c <==
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct {
    unsigned int a : 1;
    unsigned int b : 1;
    unsigned int c : 1;
} flag1;


==> break_test.c <==
/* test where does the "break" jump to, right outside the while or to the
 * outmost layer of control. Answer: just right outside the loop */
/* also test the behavior of the "break" in if. Answer: compiler doesn't like it */

#include <stdio.h>

int main()
{
    int a = 1;


==> dist_var_defs.c <==
int main()
{
    int i = 0;
    switch (i) {
        int k = 10;
        case 0:
            //int j = 1; //can't init in case statement
            break;
        default:
            break;

==> enum_test.c <==
#include <stdio.h>

enum ret_code {
    OK = 0,
    ERR = -1,
    ERR_SYS = -2,
    ERR_OTHER /* the value of it is -1 */
};

int main()

==> for_test.c <==
#include <stdio.h>

int main() 
{
    int idx = 0;

    for (idx++; idx++<10; idx++) {
        printf("idx = %d\n", idx);
    }


==> init_test.c <==
/* local vars have undefined values, though if you define some local ints, they
 * may all appear to be 0. The easiest way to check upon this is to declare an
 * array that's big and dump out the value of it. (see local_arr_dump) */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int i_g;
static i_s;
char str_g[10000];

==> strlen_test.c <==
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define OK 0
#define ERR -1
int main(int argc, char* argv[])
{
    char str1[] = "hello";
    char *str2 = "hello";

==> strstr_test.c <==
#include <stdio.h>
#include <string.h>

int main ()
{
  char str[] ="This is a line";
  char *p;
  
  p = strstr (str, "is");
  strncpy (p, "sample",5 );

==> triple_star_test.c <==
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "test_defs.h"

int foo (char ***list) 
{
    int retstat = NO_ERR;

    *list = malloc(sizeof(char *) * 3);

==> zero_test.c <==
#include <stdio.h>

int main()
{
    printf("\'\\0\' is in decimal: %d\n", '\0');
    printf("\'0\' is in decimal: %d\n", '0');
    return 0;

