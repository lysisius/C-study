#Multi-word Queries

#Triple Gold Star

#For this question, your goal is to modify the search engine to be able to
#handle multi-word queries.  To do this, we need to make two main changes:

#    1. Modify the index to keep track of not only the URL, but the position
#    within that page where a word appears.

#    2. Make a version of the lookup procedure that takes a list of target
#    words, and only counts a URL as a match if it contains all of the target
#    words, adjacent to each other, in the order they are given in the input.

#For example, if the search input is "Monty Python", it should match a page that
#contains, "Monty Python is funny!", but should not match a page containing
#"Monty likes the Python programming language."  The words must appear in the
#same order, and the next word must start right after the end of the previous
#word.

#Modify the search engine code to support multi-word queries. Your modified code
#should define these two procedures:

def ordered_search(index, ranks, keyword):
    raw = lookup(index, keyword)
    disorder = []
    if raw is None:
        return None
    for e in raw:
        disorder.append([e[0], ranks[e[0]]])
    
    order = sorted(disorder, key=lambda page: page[1])
    order.reverse()
    
    return [page[0] for page in order]
    
def compute_ranks(graph):
    d = 0.8 # damping factor
    numloops = 10
    
    ranks = {}
    npages = len(graph)
    for page in graph:
        ranks[page] = 1.0 / npages
   
    newranks = {} 
    for i in range(0, numloops):
        for page in graph:
            newrank = (1 - d) / npages
            for node in graph:
                if page in graph[node]:
                    newrank = newrank + d * (ranks[node] / len(graph[node]))
            newranks[page] = newrank
        ranks = newranks
    return ranks
    
#    crawl_web(seed) => index, graph
#        A modified version of crawl_web that produces an index that includes
#        positional information.  It is up to you to figure out how to represent
#        positions in your index and you can do this any way you want.  Whatever
#        index you produce is the one we will pass into your multi_lookup(index,
#        keyword) procedure.

#    multi_lookup(index, list of keywords) => list of URLs
#        A URL should be included in the output list, only if it contains all of
#        the keywords in the input list, next to each other.
        
def multi_lookup(index, query):
    res = []
    if len(query) == 1:
        res = lookup(index, query[0])
        return [col[0] for col in res] # strip away the index
    
    # multi-word case
    res_tmp = lookup(index, query[0])
    for r in res_tmp: # for every url
        url = r[0]
        pos = r[1]
        words = get_page(url).split()
        match = False
        for i in range(len(pos)): # for every occurrance of the keyword
            for j in range(1, len(query)): # try to match the rest of the query (skip the first)
                if words[pos[i]+j] == query[j]:
                    match = True
                else:
                    match = False
            # if this pos is good, this url is good. go to the next url
            if match:
                if url not in res:
                    res.append(url)
    return res
        

def crawl_web(seed, max_depth): # returns index, graph of inlinks
    tocrawl = [seed]
    crawled = []
    graph = {}  # <url>, [list of pages it links to]
    index = {} 

    while max_depth>=0: 
        tocrawl_tmp = [] #temporarily store tocrawl of a level 
        while tocrawl: 
            page = tocrawl.pop()
            if page not in crawled:
                content = get_page(page)
                add_page_to_index(index, page, content)
                outlinks = get_all_links(content)
                graph[page] = outlinks
                union(tocrawl_tmp, outlinks)
                crawled.append(page)
        union(tocrawl, tocrawl_tmp)
        max_depth -= 1
    return index, graph
    
def crawl_web2(seed,max_depth):
    tocrawl = [seed]
    crawled = []
    
    while max_depth>=0: 
        tocrawl_tmp = [] #temporarily store tocrawl of a level 
        while tocrawl:
            page = tocrawl.pop()
            if page not in crawled:
                union(tocrawl_tmp, get_all_links(get_page(page)))
                crawled.append(page)
        union(tocrawl, tocrawl_tmp)
        max_depth -= 1

    return crawled

def get_next_target(page):
    start_link = page.find('<a href=')
    if start_link == -1: 
        return None, 0
    start_quote = page.find('"', start_link)
    end_quote = page.find('"', start_quote + 1)
    url = page[start_quote + 1:end_quote]
    return url, end_quote

def get_all_links(page):
    links = []
    while True:
        url, endpos = get_next_target(page)
        if url:
            links.append(url)
            page = page[endpos:]
        else:
            break
    return links


def union(a, b):
    for e in b:
        if e not in a:
            a.append(e)

def add_page_to_index(index, url, content):
    words = content.split() # the split can be improved
    words_idx = {}
    for i in range(len(words)):
        if words[i] not in words_idx:
            words_idx[words[i]] = [i]
        else:
            words_idx[words[i]].append(i)
    for word in words:
        add_to_index(index, word, [url, words_idx[word]])
        
def add_to_index(index, keyword, url):
    if keyword in index:
        if url not in index[keyword]:
            index[keyword].append(url)
    else:
        index[keyword] = [url]

def lookup(index, keyword):
    if keyword in index:
        return index[keyword]
    else:
        return []
    



cache = {
   'http://www.udacity.com/cs101x/final/multi.html': """<html>
<body>

<a href="http://www.udacity.com/cs101x/final/a.html">A</a><br>
<a href="http://www.udacity.com/cs101x/final/b.html">B</a><br>

</body>
""", 
   'http://www.udacity.com/cs101x/final/b.html': """<html>
<body>

Monty likes the Python programming language
Thomas Jefferson founded the University of Virginia
When Mandela was in London, he visited Nelson's Column.

</body>
</html>
""", 
   'http://www.udacity.com/cs101x/final/a.html': """<html>
<body>

Python Monty Python is not about a programming language Monty
Udacity was not founded by Thomas Jefferson
Nelson Mandela said "Education is the most powerful weapon which you can
use to change the world."

    
</body>
</html>
""", 
}

#def get_page(url):
#    if url in cache:
#        return cache[url]
#    else:
#        print "Page not in cache: " + url
#        return None
exec_cache = {}
import urllib
def get_page(url):
    if url in cache:
        return cache[url]
    else:
        try:
            page = urllib.urlopen(url).read()
            cache[url] = page
            return page
        except:
            return ''
            
import time
def cached_execution(cache,code):
    start = time.clock()
    if code not in cache:
        cache[code] = eval(code)
    run_time = time.clock() - start
    return cache[code]
#Here are a few examples from the test site:


#index, graph = cached_execution(cache, 'crawl_web(' + '"http://www.iana.org/domains/example/"' + ', 2)')
#index, graph = crawl_web('http://www.iana.org/domains/example/', 1)
#index, graph = crawl_web('http://www.norvig.com/', 1)
index, graph = crawl_web('http://www.norvig.com/paip.html', 1)
ranks = compute_ranks(graph)


#print index
print ordered_search(index, ranks, 'Lisp')
print multi_lookup(index, ['Lisp']) 
#>>> ['http://www.udacity.com/cs101x/final/b.html', 'http://www.udacity.com/cs101x/final/a.html']

#print multi_lookup(index, ['Monty', 'Python']) == ['http://www.udacity.com/cs101x/final/a.html']
#>>> ['http://www.udacity.com/cs101x/final/a.html']

#print multi_lookup(index, ['Python', 'programming', 'language'])
#>>> ['http://www.udacity.com/cs101x/final/b.html']

#print multi_lookup(index, ['Thomas', 'Jefferson'])
#>>> ['http://www.udacity.com/cs101x/final/b.html', 'http://www.udacity.com/cs101x/final/a.html']

#print multi_lookup(index, ['most', 'powerful', 'weapon'])
#>>> ['http://www.udacity.com/cs101x/final/a.html']

#print multi_lookup(index, ['most', 'powerful', 'weapon', 'which', 'you', 'can'])